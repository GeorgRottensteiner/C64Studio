using GR.Memory;
using System;
using System.Collections.Generic;
using System.Text;



namespace Tiny64
{
  public class Memory
  {
    public enum ReadType
    {
      READ_AS_CPU,
      READ_FROM_RAM
    }

    public enum MemorySource
    {
      RAM,
      UNDEFINED,
      CART_LO,
      CART_HI,
      BASIC_ROM,
      IO,
      CHARSET_ROM,
      KERNAL_ROM
    }



    public byte[]         RAM = new byte[65536];
    public byte[]         Kernal = new byte[8192];
    public byte[]         BASICROM = new byte[8192];
    public byte[]         CharacterROM = new byte[4096];
    public byte[]         ColorRAM = new byte[1024];
    public byte[]         CartLO = new byte[16384];
    public byte[]         CartHI = new byte[16384];

    internal MemorySource   Range0000To0FFF = MemorySource.RAM;
    internal MemorySource   Range1000To7FFF = MemorySource.RAM;
    internal MemorySource   Range8000To9FFF = MemorySource.RAM;
    internal MemorySource   RangeA000ToBFFF = MemorySource.BASIC_ROM;
    internal MemorySource   RangeC000ToCFFF = MemorySource.RAM;
    internal MemorySource   RangeD000ToDFFF = MemorySource.IO;
    internal MemorySource   RangeE000ToFFFF = MemorySource.KERNAL_ROM;

    Machine               Machine = null;




    public Memory( Machine Machine )
    {
      this.Machine = Machine;
    }



    internal void Initialize()
    {
      RAM = new byte[65536];
      ColorRAM = new byte[1024];
      CartLO = new byte[16384];
      CartHI = new byte[16384];

      Kernal          = StringToByteArray
      BASICROM        = StringToByteArray
      CharacterROM    = StringToByteArray

      Range0000To0FFF = MemorySource.RAM;
      Range1000To7FFF = MemorySource.RAM;
      Range8000To9FFF = MemorySource.RAM;
      RangeA000ToBFFF = MemorySource.BASIC_ROM;
      RangeC000ToCFFF = MemorySource.RAM;
      RangeD000ToDFFF = MemorySource.IO;
      RangeE000ToFFFF = MemorySource.KERNAL_ROM;
    }



    public ByteBuffer ForCPU( int StartAddress, int Size )
    {
      if ( ( StartAddress < 0 )
      ||   ( Size < 0 )
      ||   ( StartAddress + Size >= 65536 ) )
      {
        Debug.Log( "ForCPU - invalid memory range!" );
        return new ByteBuffer( (uint)Size );
      }

      var result = new ByteBuffer( (uint)Size );

      /*
      Range0000To0FFF = MemorySource.RAM;
    internal MemorySource   Range1000To7FFF = MemorySource.RAM;
    internal MemorySource   Range8000To9FFF = MemorySource.RAM;
    internal MemorySource   RangeA000ToBFFF = MemorySource.BASIC_ROM;
    internal MemorySource   RangeC000ToCFFF = MemorySource.RAM;
    internal MemorySource   RangeD000ToDFFF = MemorySource.IO;
    internal MemorySource   RangeE000ToFFFF = MemorySource.KERNAL_ROM;*/

      FetchMemoryRange( StartAddress, Size, 0x0000, 0x0fff, Range0000To0FFF, result );
      FetchMemoryRange( StartAddress, Size, 0x1000, 0x7fff, Range1000To7FFF, result );
      FetchMemoryRange( StartAddress, Size, 0x8000, 0x9fff, Range8000To9FFF, result );
      FetchMemoryRange( StartAddress, Size, 0xa000, 0xbfff, RangeA000ToBFFF, result );
      FetchMemoryRange( StartAddress, Size, 0xc000, 0xcfff, RangeC000ToCFFF, result );
      FetchMemoryRange( StartAddress, Size, 0xd000, 0xdfff, RangeD000ToDFFF, result );
      FetchMemoryRange( StartAddress, Size, 0xe000, 0xffff, RangeE000ToFFFF, result );

      return result;      
    }



    private void FetchMemoryRange( int StartAddress, int Size, int RangeStart, int RangeEnd, MemorySource Source, ByteBuffer Result )
    {
      if ( ( StartAddress <= RangeEnd )
      &&   ( StartAddress + Size - 1 >= RangeStart ) )
      {
        int     localStart = Math.Max( StartAddress, RangeStart );
        int     localEnd = Math.Min( StartAddress + Size - 1, RangeEnd );

        switch ( Source )
        {
          case MemorySource.RAM:
            System.Array.Copy( RAM, localStart, Result.Data(), localStart - StartAddress, localEnd - localStart + 1 );
            break;
          case MemorySource.KERNAL_ROM:
            System.Array.Copy( Kernal, localStart - RangeStart, Result.Data(), localStart - StartAddress, localEnd - localStart + 1 );
            break;
          case MemorySource.BASIC_ROM:
            System.Array.Copy( BASICROM, localStart - RangeStart, Result.Data(), localStart - StartAddress, localEnd - localStart + 1 );
            break;
          case MemorySource.CHARSET_ROM:
            System.Array.Copy( CharacterROM, localStart - RangeStart, Result.Data(), localStart - StartAddress, localEnd - localStart + 1 );
            break;
          case MemorySource.CART_HI:
            System.Array.Copy( CartHI, localStart - RangeStart, Result.Data(), localStart - StartAddress, localEnd - localStart + 1 );
            break;
          case MemorySource.CART_LO:
            System.Array.Copy( CartLO, localStart - RangeStart, Result.Data(), localStart - StartAddress, localEnd - localStart + 1 );
            break;
          case MemorySource.IO:
            for ( int i = localStart; i <= localEnd; ++i )
            {
              Result.SetU8At( i - StartAddress, ReadFromIO( (ushort)i ) );
            }
            break;
          default:
            Debug.Log( "FetchMemoryRange unsupported source " + Source );
            break;
        }
      }
    }



    public void SetupMapping( bool Game, bool ExRom, bool CharEn, bool HiRam, bool LoRam )
    {
      // always
      Range0000To0FFF = MemorySource.RAM;

      // 0x1000 to 0x7fff
      if ( ( !Game )
      &&   ( ExRom ) )
      {
        Range1000To7FFF = MemorySource.UNDEFINED;
      }
      else
      {
        Range1000To7FFF = MemorySource.RAM;
      }

      // 0x8000 to 0x9fff
      if ( ( Game )
      &&   ( !ExRom )
      &&   ( CharEn )
      &&   ( HiRam )
      &&   ( LoRam ) ) 
      {
        Range8000To9FFF = MemorySource.CART_LO;
      }
      else if ( ( Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        Range8000To9FFF = MemorySource.CART_LO;
      }
      else if ( ( !Game )
      &&        ( ExRom ) )
      {
        Range8000To9FFF = MemorySource.CART_LO;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        Range8000To9FFF = MemorySource.CART_LO;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        Range8000To9FFF = MemorySource.CART_LO;
      }
      else
      {
        Range8000To9FFF = MemorySource.RAM;
      }

      // 0xA000 to 0xBfff
      if ( ( Game )
      &&   ( ExRom )
      &&   ( CharEn )
      &&   ( HiRam )
      &&   ( LoRam ) )
      {
        RangeA000ToBFFF = MemorySource.BASIC_ROM;
      }
      else if ( ( Game )
      &&        ( ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeA000ToBFFF = MemorySource.BASIC_ROM;
      }
      else if ( ( Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeA000ToBFFF = MemorySource.BASIC_ROM;
      }
      else if ( ( Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeA000ToBFFF = MemorySource.BASIC_ROM;
      }
      else if ( ( !Game )
      &&        ( ExRom ) )
      {
        RangeA000ToBFFF = MemorySource.UNDEFINED;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeA000ToBFFF = MemorySource.CART_HI;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( !LoRam ) )
      {
        RangeA000ToBFFF = MemorySource.CART_HI;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeA000ToBFFF = MemorySource.CART_HI;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( !LoRam ) )
      {
        RangeA000ToBFFF = MemorySource.CART_HI;
      }
      else
      {
        RangeA000ToBFFF = MemorySource.RAM;
      }

      // 0xC000 to 0xCfff
      if ( ( !Game )
      &&   ( ExRom ) )
      {
        RangeC000ToCFFF = MemorySource.UNDEFINED;
      }
      else
      {
        RangeC000ToCFFF = MemorySource.RAM;
      }

      // 0xD000 to 0xDfff
      if ( ( Game )
      &&   ( ExRom )
      &&   ( CharEn )
      &&   ( HiRam )
      &&   ( LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.IO;
      }
      else if ( ( Game )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( !LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.IO;
      }
      else if ( ( Game )
      &&        ( CharEn )
      &&        ( !HiRam )
      &&        ( LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.IO;
      }
      else if ( ( Game )
      &&        ( ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.CHARSET_ROM;
      }
      else if ( ( Game )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( !LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.CHARSET_ROM;
      }
      else if ( ( Game )
      &&        ( !CharEn )
      &&        ( !HiRam )
      &&        ( LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.CHARSET_ROM;
      }
      else if ( ( Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.IO;
      }
      else if ( ( Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.CHARSET_ROM;
      }
      else if ( ( !Game )
      &&        ( ExRom ) )
      {
        RangeD000ToDFFF = MemorySource.IO;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.IO;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( !LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.IO;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( !HiRam )
      &&        ( LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.IO;
      }    
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.CHARSET_ROM;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( !LoRam ) )
      {
        RangeD000ToDFFF = MemorySource.CHARSET_ROM;
      }
      else
      {
        RangeD000ToDFFF = MemorySource.RAM;
      }

      // 0xE000 to 0xFFFF
      if ( ( Game )
      &&   ( ExRom )
      &&   ( CharEn )
      &&   ( HiRam )
      &&   ( LoRam ) )
      {
        RangeE000ToFFFF = MemorySource.KERNAL_ROM;
      }
      else if ( ( Game )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( !LoRam ) )
      {
        RangeE000ToFFFF = MemorySource.KERNAL_ROM;
      }
      else if ( ( Game )
      &&        ( ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeE000ToFFFF = MemorySource.KERNAL_ROM;
      }
      else if ( ( Game )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( !LoRam ) )
      {
        RangeE000ToFFFF = MemorySource.KERNAL_ROM;
      }
      else if ( ( Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeE000ToFFFF = MemorySource.KERNAL_ROM;
      }
      else if ( ( Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeE000ToFFFF = MemorySource.KERNAL_ROM;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeE000ToFFFF = MemorySource.KERNAL_ROM;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( CharEn )
      &&        ( HiRam )
      &&        ( !LoRam ) )
      {
        RangeE000ToFFFF = MemorySource.KERNAL_ROM;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( LoRam ) )
      {
        RangeE000ToFFFF = MemorySource.KERNAL_ROM;
      }
      else if ( ( !Game )
      &&        ( !ExRom )
      &&        ( !CharEn )
      &&        ( HiRam )
      &&        ( !LoRam ) )
      {
        RangeE000ToFFFF = MemorySource.KERNAL_ROM;
      }
      else if ( ( !Game )
      &&        ( ExRom ) )
      {
        RangeE000ToFFFF = MemorySource.CART_HI;
      }
      else
      {
        RangeE000ToFFFF = MemorySource.RAM;
      }
    }



    internal static byte[] StringToByteArray( string hex )
    {
      int NumberChars = hex.Length;
      byte[] bytes = new byte[NumberChars / 2];
      for ( int i = 0; i < NumberChars; i += 2 )
      {
        bytes[i / 2] = Convert.ToByte( hex.Substring( i, 2 ), 16 );
      }
      return bytes;
    }



    public ushort ReadWordDirect( ushort Address )
    {
      byte  lo = ReadByteDirect( Address );
      byte  hi = ReadByteDirect( (ushort)( Address + 1 ) );

      return (ushort)( lo + ( hi << 8 ) );
    }



    public byte ReadByteDirectAsVIC( ushort Address )
    {
      if ( ( Address >= 0x1000 )
      &&   ( Address < 0x2000 ) )
      {
        return CharacterROM[Address & 0xfff];
      }
      else if ( ( Address >= 0x9000 )
      &&        ( Address < 0xa000 ) )
      {
        return CharacterROM[Address & 0xfff];
      }
      return ReadByteDirect( Address );
    }



    public byte ReadByteDirect( ushort Address )
    {
      if ( ( Address >= 0x0000 )
      &&   ( Address < 0x1000 ) )
      {
        return RAM[Address];
      }
      else if ( ( Address >= 0x1000 )
      &&        ( Address < 0x8000 ) )
      {
        switch ( Range1000To7FFF )
        {
          case MemorySource.RAM:
            return RAM[Address];
          case MemorySource.UNDEFINED:
            return (byte)new Random().Next( 256 );
        }
      }
      else if ( ( Address >= 0x8000 )
      &&        ( Address < 0xA000 ) )
      {
        switch ( Range8000To9FFF )
        {
          case MemorySource.CART_LO:
            return CartLO[Address - 0x1000];
          case MemorySource.RAM:
            return RAM[Address];
        }
      }
      else if ( ( Address >= 0xA000 )
      &&        ( Address < 0xC000 ) )
      {
        switch ( RangeA000ToBFFF )
        {
          case MemorySource.RAM:
            return RAM[Address];
          case MemorySource.BASIC_ROM:
            return BASICROM[Address - 0xA000];
          case MemorySource.CART_HI:
            return CartHI[Address - 0xA000];
          case MemorySource.UNDEFINED:
            return (byte)new Random().Next( 256 );
        }
      }
      else if ( ( Address >= 0xC000 )
      &&        ( Address < 0xD000 ) )
      {
        switch ( RangeC000ToCFFF )
        {
          case MemorySource.RAM:
            return RAM[Address];
          case MemorySource.UNDEFINED:
            return (byte)new Random().Next( 256 );
        }
      }
      else if ( ( Address >= 0xD000 )
      &&        ( Address < 0xE000 ) )
      {
        switch ( RangeD000ToDFFF )
        {
          case MemorySource.RAM:
            return RAM[Address];
          case MemorySource.CHARSET_ROM:
            return CharacterROM[Address - 0xD000];
          case MemorySource.IO:
            return ReadFromIO( Address );
        }
      }
      else if ( Address >= 0xE000 )
      {
        switch ( RangeE000ToFFFF )
        {
          case MemorySource.RAM:
            return RAM[Address];
          case MemorySource.KERNAL_ROM:
            return Kernal[Address - 0xE000];
          case MemorySource.CART_HI:
            return CartHI[Address - 0xE000];
        }
      }
      throw new ArgumentException( "Address out of bounds or no range set!" );
    }



    internal byte ReadByte( int Address )
    {
      if ( Address >= 65536 )
      {
        Address &= 0xffff;
      }
      return ReadByteDirect( (ushort)Address );
    }



    internal ushort ReadWord( int Address )
    {
      return ReadWordDirect( (ushort)Address );
    }



    internal void WriteByte( ushort Address, byte Value )
    {
      if ( ( Address >= 0x0000 )
      &&   ( Address < 0x1000 ) )
      {
        RAM[Address] = Value;
        return;
      }
      else if ( ( Address >= 0x1000 )
      &&        ( Address < 0x8000 ) )
      {
        switch ( Range1000To7FFF )
        {
          case MemorySource.RAM:
            RAM[Address] = Value;
            return;
          case MemorySource.UNDEFINED:
            return;
        }
      }
      else if ( ( Address >= 0x8000 )
      &&        ( Address < 0xA000 ) )
      {
        switch ( Range8000To9FFF )
        {
          case MemorySource.CART_LO:
          case MemorySource.RAM:
            RAM[Address] = Value;
            return;
        }
      }
      else if ( ( Address >= 0xA000 )
      &&        ( Address < 0xC000 ) )
      {
        switch ( RangeA000ToBFFF )
        {
          case MemorySource.CART_HI:
          case MemorySource.BASIC_ROM:
          case MemorySource.RAM:
            RAM[Address] = Value;
            return;
          case MemorySource.UNDEFINED:
            return;
        }
      }
      else if ( ( Address >= 0xC000 )
      &&        ( Address < 0xD000 ) )
      {
        switch ( RangeC000ToCFFF )
        {
          case MemorySource.RAM:
            RAM[Address] = Value;
            return;
          case MemorySource.UNDEFINED:
            return;
        }
      }
      else if ( ( Address >= 0xD000 )
      &&        ( Address < 0xE000 ) )
      {
        switch ( RangeD000ToDFFF )
        {
          case MemorySource.CHARSET_ROM:
          case MemorySource.RAM:
            RAM[Address] = Value;
            return;
          case MemorySource.IO:
            WriteToIO( Address, Value );
            return;
        }
      }
      else if ( Address >= 0xE000 )
      {
        switch ( RangeE000ToFFFF )
        {
          case MemorySource.RAM:
          case MemorySource.KERNAL_ROM:
          case MemorySource.CART_HI:
            RAM[Address] = Value;
            return;
        }
      }
    }



    private byte ReadFromIO( ushort Address )
    {
      if ( ( Address >= 0xd000 )
      &&   ( Address < 0xd400 ) )
      {
        // VIC

        // TODO - proper handling!
        byte vicAddress = (byte)( Address & 0x003f );
        return Machine.VIC.ReadByte( vicAddress );
      }
      else if ( ( Address >= 0xd400 )
      &&        ( Address < 0xd800 ) )
      {
        // SID
        return Machine.SID.ReadByte( (byte)( Address & 0x01f ) );
      }
      else if ( ( Address >= 0xd800 )
      &&        ( Address < 0xd800 + 1024 ) )
      {
        // Color RAM
        byte    color = ColorRAM[Address - 0xd800];

        // random upper nibble
        color = (byte)( color + ( new Random().Next( 16 ) << 4 ) );
        return color;
      }
      else if ( ( Address >= 0xdc00 )
      &&        ( Address < 0xdd00 ) )
      {
        // CIA1
        return Machine.CIA1.ReadByte( (byte)( Address & 0x0f ) );
      }
      else if ( ( Address >= 0xdd00 )
      &&        ( Address < 0xde00 ) )
      {
        // CIA2
        return Machine.CIA2.ReadByte( (byte)( Address & 0x0f ) );
      }
      // TODO
      throw new NotSupportedException( "Unsupported IO address " + Address.ToString( "X4" ) );
    }



    private void WriteToIO( ushort Address, byte Value )
    {
      // TODO - send to VIC/SID/CIA/etc...
      if ( ( Address >= 0xd000 )
      &&   ( Address < 0xd400 ) )
      {
        // VIC
        byte vicAddress = (byte)( Address & 0x003f );

        Machine.VIC.WriteByte( vicAddress, Value );
      }
      else if ( ( Address >= 0xd400 )
      &&        ( Address < 0xd800 ) )
      {
        // SID
        Machine.SID.WriteByte( (byte)( Address & 0x0ff ), Value );
      }
      else if ( ( Address >= 0xd800 )
      &&        ( Address < 0xd800 + 1024 ) )
      {
        // Color RAM
        ColorRAM[Address - 0xd800] = (byte)( Value & 0x0f );
      }
      else if ( ( Address >= 0xdc00 )
      &&        ( Address < 0xdd00 ) )
      {
        // CIA1
        Machine.CIA1.WriteByte( (byte)( Address & 0x0f ), Value );
      }
      else if ( ( Address >= 0xdd00 )
      &&        ( Address < 0xde00 ) )
      {
        // CIA2
        Machine.CIA2.WriteByte( (byte)( Address & 0x0f ), Value );
      }
      else
      {
        // ignore?
        //throw new NotSupportedException( "Unsupported write to IO address " + Address.ToString( "X4" ) );
      }
    }

  }
}
